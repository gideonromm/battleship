import sys
import uuid
from random import randint

class Ship:
    def __init__(self, length, name):
        self.hits = 0
        self.length = length
        self.name = name 

class Fleet:
    def __init__(self):
        self.ships = []
        self.ships.append(Ship(2, "Mini"))
        self.ships.append(Ship(3, "Submarine"))
        self.ships.append(Ship(4, "Cruiser"))
        self.ships.append(Ship(4, "Battleship"))
        self.ships.append(Ship(5, "Carrier"))

class Cell:
    def __init__(self, row, col):
        self.status = "-"   
        self.row = row
        self.col = col
        self.ship = None

    def fire(self):
        if self.ship:
            self.status = "H"
            self.ship.hits += 1
            if self.ship.hits == self.ship.length:
                return 2
            else:
                return 1
        else:
            self.status = "M"
            return 0

class Board:
    def __init__(self, size):
        self.ocean = []
        for x in range(size):
            row = [];
            for y in range(size):
                row.append(Cell(x, y))
            self.ocean.append(row)

    def printBoard(self):
        for row in self.ocean:
            for cell in row:
                sys.stdout.write(str(cell.status))
            print 

    def checkCell(self, cell):
        if cell.ship:
            raise Exception("You already placed your " + cell.ship.name + " ship in this cell: " + str(cell.row) + "," + str(cell.col))

    def placeShip(self, row, col, direction, ship):
        if (direction == 0):
            for cell in range(col, col+ship.length):
                try: 
                    self.checkCell(self.ocean[row][cell])
                except IndexError:
                    print "You are trying to place a ship outside the ocean!"
                    return 
                except Exception, e:
                    print e
                    return 
            for cell in range(col, col+ship.length):
                self.ocean[row][cell].ship = ship
        else: 
            for cell in range(row, row+ship.length):
                try: 
                    self.checkCell(self.ocean[cell][col])
                except IndexError:
                    print "You are trying to place a ship outside the ocean!"
                    return 
                except Exception, e:
                    print e
                    return 
            for cell in range(row, row+ship.length):
                self.ocean[cell][col].ship = ship
        return 1

class Player:
    def __init__(self, name, boardSize):
        self.fleet = Fleet()
        self.board = Board(boardSize)
        self.name = name

    def placeShip(self, ship):
        shipPlaced = 0
        while not shipPlaced:
            print "Hi, " + self.name + ". " + "Please place the following ship: " + ship.name + " (length: " + str(ship.length) + ")"
            try:
                row = int(raw_input("Row: "))
                col = int(raw_input("Column: "))
                direction = int(raw_input("Direction [0 = horizontal, 1 = vertical]: "))
            except KeyboardInterrupt, e:
                exit()
            except:
                self.placeShip(ship)
                return
            shipPlaced = self.board.placeShip(row, col, direction, ship)

    def randomPlaceShip(self, ship):
        shipPlaced = 0
        while not shipPlaced:
            row = randint(0, len(self.board.ocean[0]) - 1)
            col = randint(0, len(self.board.ocean[0]) - 1)
            direction = randint(0,1)
            shipPlaced = self.board.placeShip(row, col, direction, ship)

    def setup(self):
        for ship in self.fleet.ships:
            self.placeShip(ship)

    def autosetup(self):
        for ship in self.fleet.ships:
            self.randomPlaceShip(ship)

    def fire(self, player, row, col):
        result = player.board.ocean[row][col].fire()
        if result == 0:
            print "Miss!"
        elif result == 1:
            print "Hit!"
        elif result == 2: 
            print self.name + " sinks " + player.name + "'s " + player.board.ocean[row][col].ship.name
            player.fleet.ships.remove(player.board.ocean[row][col].ship)

    def guess(self, player):
        print "Guess where " + player.name + " is hiding his ships"
        print "  " + str(len(player.fleet.ships)) + " ships remaining: " 
        for ship in player.fleet.ships:
            print "    " + ship.name
        try:   
            row = int(raw_input("Row: "))
            col = int(raw_input("Column: "))
        except KeyboardInterrupt, e:
            exit()
        except:
            self.guess(player)
            return
        self.fire(player, row, col)

    def autoguess(self, player):
        row = randint(0, len(player.board.ocean[0]) - 1)
        col = randint(0, len(player.board.ocean[0]) - 1)
        print "Computer guesses: " + str(row) + ", " + str(col)
        self.fire(player, row, col)


class ComputerPlayer(Player):
    def guess(self, player):
        row = randint(0, len(player.board.ocean[0]) - 1)
        col = randint(0, len(player.board.ocean[0]) - 1)
        print "Computer guesses: " + str(row) + ", " + str(col)
        self.fire(player, row, col)

    def setup(self):
        for ship in self.fleet.ships:
            self.randomPlaceShip(ship)

    def placeShip(self, ship):
        shipPlaced = 0
        while not shipPlaced:
            row = randint(0, len(self.board.ocean[0]) - 1)
            col = randint(0, len(self.board.ocean[0]) - 1)
            direction = randint(0,1)
            shipPlaced = self.board.placeShip(row, col, direction, ship)

class Game:
    def __init__(self, name):
        self.id = uuid.uuid1()
        self.boardSize = 10
        self.players = []
        self.players.append(Player(name, self.boardSize))

    def register(self, name, type):
        if type == "computer":
            newPlayer = ComputerPlayer(name, self.boardSize)
        else:
            newPlayer = Player(name, self.boardSize)
        self.players.append(newPlayer)
        return newPlayer

    def start(self):
        for player in self.players:
            player.setup()
        if len(self.players) < 2:
            computer = self.register("Computer", "computer")
            computer.setup()
        while True:
            for idx, player in enumerate(self.players):
                opponent = self.players[((idx + 1) % 2)]
                player.guess(opponent) 
                opponent.board.printBoard()
                if len(opponent.fleet.ships) < 1:   
                    print player.name + " wins!"
                    return   

myGame = Game("Gadi")
myGame.start()
                
#playerOne = Player()
#playerOne.board.printBoard()
#playerOne.board.placeShip(0,0,0,playerOne.fleet.ships[0])
#playerOne.board.placeShip(0,0,0,playerOne.fleet.ships[0])
#playerOne.board.placeShip(0,4,0,playerOne.fleet.ships[0])
